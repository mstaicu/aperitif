version: "2.4"

services:
  traefik:
    image: traefik:2.3
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    command:
      # - "--log.level=DEBUG"
      # Traefik will listen on port 8080 by default for API request.
      - "--api.insecure"
      # Enabling Docker provider
      - "--providers.docker"
      # Do not expose containers unless explicitly told so
      # If set to false, containers that
      # don't have a traefik.enable=true label
      # will be ignored from the resulting routing configuration
      - "--providers.docker.exposedbydefault=false"
  api:
    build:
      context: ./express
      target: dev
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SIGNATURE=supersecret
    volumes:
      - ./express:/home/node/api
      # This is needed because the host node modules are built
      # for the host operating system architecture
      # and our development environment's architecture is based on Debian
      #
      # Hide the host node_modules by creating an anonymous volume
      # at the location of the bind mounted node modules
      #
      # This will allow us to either run the development environment
      # with or without Docker
      - /home/node/api/node_modules
    ports:
      # Still keeping these ports opened in case of debugging
      - "3000:3000"
      # This port is used by the service's debugger (node debugger)
      - "9229:9229"
    labels:
      # Explicitly tell Traefik to expose this container
      - "traefik.enable=true"
      # The domain the service will respond to
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
  postgres:
    image: postgres
    environment:
      # TODO: Add env vars for user, pass and db
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: pg_isready -U postgres -h 127.0.0.1
