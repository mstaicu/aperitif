apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-controller
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: traefik-depl
spec:
  replicas: 3
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      # https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#more-practical-use-cases
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - traefik
                topologyKey: kubernetes.io/hostname
      serviceAccountName: traefik-ingress-controller
      containers:
        - name: traefik
          image: traefik:v3.0.1
          args:
            #
            # https://doc.traefik.io/traefik/operations/dashboard/#secure-mode
            #
            # 1. Start by enabling the dashboard by using the following option from Traefik's API on the static configuration:
            # 2. Then define a routing configuration on Traefik itself, with a router attached to the service api@internal in the dynamic configuration, to allow defining:
            #
            - --api=true
            #
            # https://doc.traefik.io/traefik/operations/dashboard/#insecure-mode
            #
            # https://doc.traefik.io/traefik/operations/api/#insecure
            #
            # Enable the API in insecure mode, which means that the API will be available directly on the entryPoint named 'traefik'.
            #
            - --api.insecure=false
            #
            # https://doc.traefik.io/traefik/operations/api/#dashboard
            # https://doc.traefik.io/traefik/operations/dashboard/
            #
            # The dashboard is available at the same location as the API
            # but on the path /dashboard/ by default.
            #
            # The trailing slash / in /dashboard/ is mandatory
            # Optional, Default=true
            #
            - --api.dashboard=true
            #
            # https://doc.traefik.io/traefik/observability/access-logs/#configuration
            #
            - --accesslog
            #
            - --log.level=DEBUG
            #
            #
            # Disables certificate verification between your Traefik instance and your backends
            #
            # https://doc.traefik.io/traefik/v3.0/routing/overview/#insecureskipverify
            #
            - --serversTransport.insecureSkipVerify=true
            #
            - --entrypoints.http.address=:80
            #
            - --providers.kubernetescrd
---
#
# As underlined in the documentation for the api.dashboard option,
# the router rule defined for Traefik must match the path prefixes /api and /dashboard.
#
# https://doc.traefik.io/traefik/operations/dashboard/#dashboard-router-rule
#
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
spec:
  entryPoints:
    - http
  routes:
    #
    # Depending on the deployment, do not forget to add to /etc/hosts a mapping
    # between the IP of the cloud load balancer and the registered host name
    # or between the localhost IP and the registered host name
    #
    # https://www.padok.fr/en/blog/traefik-kubernetes-certmanager
    #
    # We need the Host in order to prevent this message:
    # No domain found in rule PathPrefix(`/dashboard`) || PathPrefix(`/api`),
    # the TLS options applied for this router will depend on the SNI of each request
    #
    - match: Host(`traefik-srv`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))
      kind: Rule
      services:
        - name: api@internal
          kind: TraefikService
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-srv
spec:
  type: ClusterIP
  selector:
    app: traefik
  ports:
    - name: traefik
      protocol: TCP
      port: 3000
      targetPort: 3000
---
#
# If you want to debug this, you have to
#
# 2. Register '127.0.0.1 traefik-srv' in your /etc/hosts 
# 3. Access http://traefik-srv:30000/dashboard/
#
apiVersion: v1
kind: Service
metadata:
  name: traefik-srv-nodeport
spec:
  type: NodePort
  selector:
    app: traefik
  ports:
    - name: traefik-nodeport
      protocol: TCP
      targetPort: 80
      port: 80
      nodePort: 30000
