apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-controller
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: traefik-depl
spec:
  replicas: 3
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      # https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#more-practical-use-cases
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - traefik
                topologyKey: kubernetes.io/hostname
      serviceAccountName: traefik-ingress-controller
      containers:
        - name: traefik
          image: traefik:v3.0.1
          volumeMounts:
            - name: traefik-config
              mountPath: "/etc/traefik"
      volumes:
        - name: traefik-config
          configMap:
            name: traefik-config
---
#
# As underlined in the documentation for the api.dashboard option,
# the router rule defined for Traefik must match the path prefixes /api and /dashboard.
#
# https://doc.traefik.io/traefik/operations/dashboard/#dashboard-router-rule
#
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard-websecure
spec:
  # https://doc.traefik.io/traefik/v3.0/routing/entrypoints/#asdefault
  entryPoints:
    - websecure
  routes:
    #
    # Depending on the deployment, do not forget to add to /etc/hosts a mapping
    # between the IP of the cloud load balancer and the registered host name
    # or between the localhost IP and the registered host name
    #
    # https://www.padok.fr/en/blog/traefik-kubernetes-certmanager
    #
    # We need the Host in order to prevent this message:
    # No domain found in rule PathPrefix(`/dashboard`) || PathPrefix(`/api`),
    # the TLS options applied for this router will depend on the SNI of each request
    #
    - match: Host(`tma.com`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))
      kind: Rule
      services:
        - name: api@internal
          kind: TraefikService
      middlewares:
        - name: traefik-tls-config
  tls:
    secretName: certs-secret
    options:
      name: traefik-tls-options
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard-web
spec:
  entryPoints:
    - web
  routes:
    - match: Host(`tma.com`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))
      kind: Rule
      services:
        - name: api@internal
          kind: TraefikService
---
# ---------------------------------------------------------------------------------
#
# Middleware
#
# ---------------------------------------------------------------------------------
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: traefik-tls-config
spec:
  headers:
    browserXssFilter: true
    contentTypeNosniff: true
    frameDeny: true
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: validate-auth
spec:
  forwardAuth:
    address: http://auth-srv/validate-auth
# ---------------------------------------------------------------------------------
#
# Middleware
#
# ---------------------------------------------------------------------------------
---
apiVersion: traefik.io/v1alpha1
kind: TLSOption
metadata:
  name: traefik-tls-options
spec:
  minVersion: VersionTLS12
  cipherSuites:
    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 # TLS 1.2
    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305 # TLS 1.2
    - TLS_AES_256_GCM_SHA384 # TLS 1.3
    - TLS_CHACHA20_POLY1305_SHA256 # TLS 1.3
  curvePreferences:
    - CurveP521
    - CurveP384
  #
  # With strict SNI checking enabled, Traefik won't allow connections from clients
  # that do not specify a server_name extension or don't match any of the configured certificates.
  # The default certificate is irrelevant on that matter
  #
  # # https://doc.traefik.io/traefik/https/tls/#strict-sni-checking
  #
  # A server that receives a client hello containing the "server_name" extension
  # MAY use the information contained in the extension to guide its selection
  # of an appropriate certificate to return to the client, and/or other aspects of security policy.
  # In this event, the server SHALL include an extension of type "server_name" in the (extended) server hello.
  # The "extension_data" field of this extension SHALL be empty
  #
  # https://www.rfc-editor.org/rfc/rfc6066#section-3
  #
  sniStrict: true
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-lb-srv
spec:
  type: LoadBalancer
  selector:
    app: traefik
  #
  # We want to preserve the TLS connection between each client and the replica that received the first request
  # https://kubernetes.io/docs/reference/networking/virtual-ips/#session-affinity
  #
  # The default timeout for sessionAffinity: ClientIP in Kubernetes is usually set to 3 hours (10800 seconds), but this can be configured.
  # The timeout is controlled by the sessionAffinityConfig.clientIP.timeoutSeconds field in the Service specification.
  # If a client doesn't make any new requests within this timeout period, the affinity entry is discarded. The next request from that client may then be routed to a different pod.
  #
  sessionAffinity: ClientIP
  ports:
    - name: web
      protocol: TCP
      port: 80
      targetPort: 80
    - name: websecure
      protocol: TCP
      port: 443
      targetPort: 443
---
apiVersion: v1
kind: Service
metadata:
  name: gateway-srv
spec:
  type: ClusterIP
  selector:
    app: traefik
  ports:
    - name: traefik
      protocol: TCP
      port: 3000
      targetPort: 3000
