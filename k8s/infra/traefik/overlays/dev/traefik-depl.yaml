apiVersion: apps/v1
kind: Deployment

metadata:
  name: traefik-depl
spec:
  selector:
    matchLabels:
      app: traefik
  replicas: 1
  template:
    spec:
      affinity: null
      containers:
        - name: traefik
          args:
            #
            # https://doc.traefik.io/traefik/operations/dashboard/#secure-mode
            #
            # 1. Start by enabling the dashboard by using the following option from Traefik's API on the static configuration:
            # 2. Then define a routing configuration on Traefik itself, with a router attached to the service api@internal in the dynamic configuration, to allow defining:
            #
            - --api=true
            #
            # https://doc.traefik.io/traefik/operations/dashboard/#insecure-mode
            #
            # https://doc.traefik.io/traefik/operations/api/#insecure
            #
            # Enable the API in insecure mode, which means that the API will be available directly on the entryPoint named 'traefik'.
            #
            - --api.insecure=false
            #
            # https://doc.traefik.io/traefik/operations/api/#dashboard
            # https://doc.traefik.io/traefik/operations/dashboard/
            #
            # The dashboard is available at the same location as the API
            # but on the path /dashboard/ by default.
            #
            # The trailing slash / in /dashboard/ is mandatory
            # Optional, Default=true
            #
            - --api.dashboard=true
            #
            # https://doc.traefik.io/traefik/observability/access-logs/#configuration
            #
            - --accesslog
            #
            - --log.level=INFO
            #
            - --entrypoints.http.address=:80
            - --entrypoints.https.address=:443
            #
            # Email address used for registration.
            #
            # Required
            #
            - --certificatesresolvers.pebble.acme.email=dj@vasile.com
            #
            # Use a HTTP-01 ACME challenge.
            #
            # Optional (but recommended)
            #
            - --certificatesresolvers.pebble.acme.httpchallenge=true
            #
            # EntryPoint to use for the HTTP-01 challenges.
            #
            # Required
            #
            - --certificatesresolvers.pebble.acme.httpchallenge.entrypoint=http
            #
            # Since we're making these requests through HTTPS, we need to validate the certificate
            # of Pebble, hence why we need to setup the root certificate authority via LEGO_CA_CERTIFICATES
            #
            - --certificatesresolvers.pebble.acme.caserver=https://pebble:14000/dir
            - --certificatesresolvers.pebble.acme.caCertificates=/pebble/pebble.minica.pem
            #
            # - --certificatesresolvers.pebble.acme.storage=/acme/acme.json
            #
            - --providers.kubernetescrd
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          volumeMounts:
            - name: pebble-ca-volume
              mountPath: /pebble
      volumes:
        - name: pebble-ca-volume
          configMap:
            name: pebble-ca-cm
