kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-destination
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
---
# Source: linkerd-control-plane/templates/heartbeat-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
---
# Source: linkerd-control-plane/templates/identity-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
---
# Source: linkerd-control-plane/templates/proxy-injector-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
---
# Source: linkerd-control-plane/templates/destination-rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-sp-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRRnUrdmd4bjdYTlRteFBydjhsR3ZGekFOQmdrcWhraUc5dzBCQVFzRkFEQXIKTVNrd0p3WURWUVFERXlCc2FXNXJaWEprTFhOd0xYWmhiR2xrWVhSdmNpNXNhVzVyWlhKa0xuTjJZekFlRncweQpOVEV3TURFeE5URXpNelphRncweU5qRXdNREV4TlRFek16WmFNQ3N4S1RBbkJnTlZCQU1USUd4cGJtdGxjbVF0CmMzQXRkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBelBWVVZpYnk0bjZCeTRlSjFVVy9zaGVhWkdwMTlONDRvU2p3MEFDT3FUMDltTlBYUzlKQQpway9KdU1Ma2I4YlJaQ0NEMlFFc1NtakRhc1BaYk53Q1A4T2YvcXRkN296ZjNNcW5LWmR0NlA3NmdpZmMxTkxrCnZhTDRhaXRQQ3AzczZNMjFjNTlWWnlXRSthS2NmK25aNUFXOFhhY2gzRzdKSDFTdFo2bTlvZ1hKRmlSaDNzQisKc3VPQWRWUVdxVmgwbGxNaFF2bWhGd2czMEJSL0Z3U0E0Q09Ob1Q5WlRoc0pyY3VFM1pibGZ3ZENZTVdtdWt0RQpIZFFaR1BoRmZzU0IvTzNGbXpyU1NFUXdOaUdvR0tIUTUyOUVEbmJVV29nbHZ5TGNON3N0bVlsS2xURUVwU05CCmVjdHJDNURsbkROZXlqWWZOZWRJS29qbGc3UFozZklsOXdJREFRQUJvMnd3YWpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpLd1lEVlIwUkJDUXdJb0lnYkdsdWEyVnlaQzF6Y0MxMllXeHBaR0YwYjNJdWJHbHVhMlZ5WkM1emRtTXdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUdJNUZyTHIydmQ5UGNwRkhJenhhcTJ6YnR6akt4ejBiTFhyWDdvN01JZXkKWHlxbHoxS0xsdGxhOTF0N1JZREVYRzZZQ2FSYkZjcjdvT3JudktFZjd3RENoaHVkelZZNGkrRENTQXNLTG5XSwpiRGl4bTZQenUreU1UWjE2eEZQOW5SaUtSSkNlUytLMllkcGxUSldRZlIyVHlyeWVZOXNIQ0JmK3JKcUhPTDVwClY0VmZPNnBTYVBEL0hMcktHYW1tcGEzQzB1ME9Ga3RleTVoK09uMXNqdldqcnZ6c2FiMnhwbjhZelNkTDdZM0oKTXJIRFF4Nk5YVlN3TDVTQjlRaVlHTHVwbndScjNPYVNSQ1o2VG9xS3prbmRGRy91KytrYVEydGl5SnhSMzgyaQpNcXFXY2pNWUlRRHFqNUJ0T3FQK0pGcDJCQnQydzQ0YTliTkx4RWxMTUg4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBelBWVVZpYnk0bjZCeTRlSjFVVy9zaGVhWkdwMTlONDRvU2p3MEFDT3FUMDltTlBYClM5SkFway9KdU1Ma2I4YlJaQ0NEMlFFc1NtakRhc1BaYk53Q1A4T2YvcXRkN296ZjNNcW5LWmR0NlA3NmdpZmMKMU5Ma3ZhTDRhaXRQQ3AzczZNMjFjNTlWWnlXRSthS2NmK25aNUFXOFhhY2gzRzdKSDFTdFo2bTlvZ1hKRmlSaAozc0Irc3VPQWRWUVdxVmgwbGxNaFF2bWhGd2czMEJSL0Z3U0E0Q09Ob1Q5WlRoc0pyY3VFM1pibGZ3ZENZTVdtCnVrdEVIZFFaR1BoRmZzU0IvTzNGbXpyU1NFUXdOaUdvR0tIUTUyOUVEbmJVV29nbHZ5TGNON3N0bVlsS2xURUUKcFNOQmVjdHJDNURsbkROZXlqWWZOZWRJS29qbGc3UFozZklsOXdJREFRQUJBb0lCQUIxOEhZblhTSkcweVU5UwpURTNXSHVHcjY1WU9pckdUVm1vNHpZdmV5S2NvSERoa0lWRFRDbUhpa0k1MzJ3MEplUTRDYjNWRWFlNjZhNEpzCmNsYnF2NWdVdUd1V2s0akIwMktiOUxoVEJJakVSWjE3eHBVSFVjakdMUjU0NUlJT2ZncHZyVzdZdVJ5QmxVT2sKVlFkQnlRcTRtSVNRaXBwL2hZZHdVeEhhcFdFdFdlcnIyeUgwUUp2RjJRQ2tOMlg2MkIyckErVDRlRlA4a2h3TwpLNDNDcWZNcTFrNFprYzJLVXdNR3pJMGhnUFZtalI1Zk8xRW44L1E1VkIveVhKN01SN29ULzM3T2pldDB0ajdBCnBCclRaYk00UWFjWnpkUUNSMmtjeWJZZ1BXYmIwN3RnZFk4WmplREIzWGVLMXlacEsxV1ZsV2RnMjczb0ZLcHUKZ0s4cGwwRUNnWUVBMnRzQVlJbHd0Q1FrOW43emRzbXh1bEdzU1J5NkxDVm1qY1NIU0RrbkpJNUFCVzFGY1F4eQpXL2RkYmNxcW9EY1VOTXV1UnQ3MnUzWHJVeEFUOTFTNUROMmlDWEkwREZmRUxpSlBqRTBkV25zQTlUcE45ck05CmpFKzhlbUxtNGs4MXN0M3lRUklOcjZwdnk1ZWNrU2c2SHo1YjhHZUEvMkxObmVWM05OSk1KMjhDZ1lFQTc3NkQKaDAvbDB3ZFlvNkxTTzNTM0xna01CMlZ6VnFEb2JEby9XWVFYSm9IRC9wQzhHL3J5MkpQelhvcitJbzRFbEhSSAo0T0RIMmEwV2ZYSmxVbDVmSVJuRG1jTXpaSzB5aFdlWFlWSlJ1ZWpaRE9zWGRtd1lPQWF4STd3RE9rTTd2SExRClkxc1FjQytZZm9GT01DUjE0MTQxeFZFM1l6VGtYOFZBWEk0L1pma0NnWUVBa3JLRGNUSVBPcUNUcWlwMFZXWmkKM0VvTW1zRkh4WG1ZWVdTZmJYanAxT1lJNGRwWjFxb0tLYjBJZ2lSNzlJS1c1OEN6WTh2bVJNZUk0cGQvV3FVTwptU0lpa0FSZUFQdi9neEQ2azBmSmFqSFM5WTJNWHRYTVpyVzMxNjFkcDhxQ2F3KzhaNE9MYXZscWtHUml6U1hTCnQ4aWI1ZXZyR3NTR29OVUQ3NE1iQ3I4Q2dZQUJNeXJsV25rRC9WMXNORHhwSDhScTdwQ28yTkVpOWRzejczYXgKcy8rSnFjeVpVWkFmYzdvVGEyb2tadjJ1bnBkWFJ0MjFPbXJGcENBZ3NKbmhONmV5T3JiSDVqb3puc3BKOEtMSgpVZWdtemd1SURRVXBDcEYwZGxRY29heENkbU91SmNUMU9sZHl1RXBERjlLVVd4cGI4UFREOEF3ZTZ2elpuZHNjCm0zbWx3UUtCZ1FDQ29QbzBnZGpFaG95cWhMWG9BTW1Nd3JoYnBMVnYwZzkzK2prbURrY1JYeG9PbVcxL05uWWUKOStQQnJQRVVRZStWNkd5K1BocUJPWlV6R1I0dzdhVllEcVljd0VObDBTQXNzVUtEcHlpUUw1VlNHQ1BmQ1hEbwpSS0RBU2U2VFJRT3phbEpSZGl6K3VLMmw2ZU5iS3RpMTRxRzkyTUNweUtJdzBtOUZmZDdjVWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-control-plane/templates/destination-rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-policy-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYW8yV0JhMDg1Q3hCdUdReEVaU0dVVEFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpVeE1EQXhNVFV4TXpNMldoY05Nall4TURBeE1UVXhNek0yV2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURUOHVvTlMyZDhVODB3MUU0dU12SUhseVkzVlNnenFnbjZCeGkrUk9ELwp3WmVaeUxXVFdEajV2N0NEVTRVcmZMNEx6ZHdQQnNxR1F1czhFOHVwRkp1SmIzMUgrdkF3cFFBdEN6ME9QVjc1Cm5NUE52OWloUHh2N0hnbGhxeStYUmgyaDVVWWt0SzFkVGpFdHhicXFzSWNWTy9nRG9WZzREaHhTT3I1WlRqUDUKbzhFTktsb0hNWDBqRVNZMUcwalkwbG14azFKZS9BVlNKYmlDQjd2QVptSHJQRVF0aXF6K3E0NVhTSjE4VzE1Twpvd1lvN0ZYNTgrS280TFVpWUx0MHNTNlcvUGdmSU14cUJKYi9NUXphZTdjeEFwUnRGcWtUaDJnZEEyUE5kcG5yCi9WMG9kN053OE55TEgyV09WVlZkeGU5QjFVVFZxOHlXcGNJZStHbG1Ed1czQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFITTk5ZG03WlRydm1vblRwbWlBeWhOQ2FKSi8KeDVhczNZZXA0NWpnRitHR3lvckQ0R2RleWJxYTFxYW9UcGVpQ3ZPQ0l1UWFlWkR4Mkx4eEVLekVLRFVGWmN5eApxdGVOdTBjaE8rMTUxWHBadHVWOUJ5ZXNldXhaYnp1NkxOVnYwRE1sOFB3WUx6N3Yxa0tOMDVrTVpKQnZFRC84CmsveEY3OFVqT1lvekRrZVdiaUNTbEhTM2RDNm8vOFV6VmYwZENIc0N0ZnM4WGIxL2pCSFhoZUJ6RWI4WXQ5OEUKM3BUMDNrL2tRdzM4QVZicU5VSFliRHEvZDBsT1lNcUthMENKOWwwWjFML3ZydmhTRTlyZitFL0UwSDc2SUhLOQpQRWhidEFrdlRITW03bWdaQS93ekdNR0dYSGtJYkJaNFNnQzJ5a0xiNXF3emQ4S2s4ZDNHTGRJMENOMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMC9McURVdG5mRlBOTU5ST0xqTHlCNWNtTjFVb002b0orZ2NZdmtUZy84R1htY2kxCmsxZzQrYit3ZzFPRkszeStDODNjRHdiS2hrTHJQQlBMcVJTYmlXOTlSL3J3TUtVQUxRczlEajFlK1p6RHpiL1kKb1Q4Yit4NEpZYXN2bDBZZG9lVkdKTFN0WFU0eExjVzZxckNIRlR2NEE2RllPQTRjVWpxK1dVNHorYVBCRFNwYQpCekY5SXhFbU5SdEkyTkpac1pOU1h2d0ZVaVc0Z2dlN3dHWmg2enhFTFlxcy9xdU9WMGlkZkZ0ZVRxTUdLT3hWCitmUGlxT0MxSW1DN2RMRXVsdno0SHlETWFnU1cvekVNMm51M01RS1ViUmFwRTRkb0hRTmp6WGFaNi8xZEtIZXoKY1BEY2l4OWxqbFZWWGNYdlFkVkUxYXZNbHFYQ0h2aHBaZzhGdHdJREFRQUJBb0lCQVFEQzVpaVdDeFhoZlFvOQo4YXptek5CRmJKZW00RGIwczFNelNOMVc4ZTNaSWNOdmxlSnEyUUNqb01NSE1JRlFDUWlWd0RxdzByVGZtNS9ICkFna1F0VE9Gd1RENlJPWWtSVWFSSlRtQzQ2cDNiTkdkWE9JdS9PS1ZHL3pTaEdGaUFRYjB2ZW12alRteWlGbXUKMXBtZHBuREJkUURQRGNvYTJkYnZRcmVSVmRsem41V1ZLSldHMG9HSGdVYVhLS3RXREI0Z2VJTFl6RFNhc0g4MApJNndkbXFDdVZxNSs3KzlmZVd5dEpWeXJIeGN0ZzMvaVlLOU52UW9LS290dENxQ1VBU1NjZkFWQ2dIS1ZCUjNLCnMxZldlQWw3cUtORjRlMDVFSklUMzYybTJxUmVVVDR2Rk9ITC9IYlEyRXlhRm40alU1WndTeDI3KzF0aE11SUIKaUhyS2xzRXBBb0dCQVBkYUFUWmZLYkVUZzJ3bFFrMTkxb0RDbGZDYWl3eERSdHI2YnIveUVsMnFRZjRSd0o5eQp2NThqTlY3ZHFuQVdjVFRPN0NlbC8zVUFPeVNTR0dSTWswSUNXWHdseXZLWXJGM3g4R08xc2hhVGhQcEErT1dZCitpUytydUFvSlNyUG04ejBIdy9lbXZEbjlOVlVESEFRTzl1cDQ1NG9uK2dNc2x0WkErRk5mU1NsQW9HQkFOdGMKQnVjS2thZzVzcXFLM3J4VWw4NzVWYi90NmRMMm5FQUtSc09yTWVJc1N3VE1jd1pYSTFTbldiU1ZDRXpZOTJoSworMkRBeHJOYWNMajFiTXNZcWdqUVU5Wk94VDB6SXcxNUtWcTdmK05pazIvUFhNYk05VEl3Sk1scmF2djJpL0pmClI1QVppNXM0RGdxQ3JtL0tJOXcxdUxaSVNCRW9FTENjNG1lSkZnWXJBb0dBZFQ0Y1JRRm1hYUN1TXB5V2lOU1UKMEFOcnZ0Z0NBSllEQjlpY2xpN1B0Y1gxOGMvSVZjdTJPR0FmOUE5dHNpTnhGVzdmVVF2RndsZVJzUXZ1czl2NApFTm04UUxSSk5pUlh6MC9XZWV5dHRUWEhXamRod3JKNEh1S2pVV3kxOFV6bXRJY2lFZ3VadFlhODdrRWdoQjJ0Cndia05RdkpPbVZjclUxRW1IYXoxSEdFQ2dZRUFyTEtMREtLWmdpUEtzZEdiQWhKblloK1Nqd1F6cms5UlBHbmEKeEhtblVEVW02cVE3ZXFabnZtSHlrZVV6SDYxQk91NnRjY0xUcktoclRuS0tNR3Mra3FuUkYwdjBwUFg1aHNYNAo5T0hoRVpldUU3emhnZklpcUZ5VzJheWtFYkpOQTRoWHd1OFpwaDQvajY3S3ZtQWFVMmhILzlwd1FuR1VramN4ClYrbnBXUGtDZ1lFQTN5clZrcDhEcHkvd0R5VXZWeFkrQm5MdzFQTytmU0RCcndCeU9ONml1UC9PbzV5SmFQcGwKK1JQYlJBSWUrZWVYeEVkOXdkV1NQVzcrS3dLWWd1WmlOamliTXQ2T2o4Z0E1Yk01aTNCdWpORW1BWURrYkpvegpSeEpxYUtLMndnL3Z0RmVXRE5ha0RzL3R6MUc0RVNQTUNMUEtmS3RVV2RscDhPTnZEUXhuQVlvPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-control-plane/templates/proxy-injector-rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-proxy-injector-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxJS243dU1DV2xFS3hqNjgvSFJwSnN3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TlRFd01ERXhOVEV6TXpWYUZ3MHlOakV3TURFeE5URXpNelZhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRFdnU2JKZEluTjdMRm4wNTBpMnN6NTZ5WVFvRWprd0Z2dXNFN1FBeVlaaUJGZQp0bFhLQVZ5SU92WitveGlOcnFLQ2s1TGZMNDk5Z3g2b2ErRnRBOFNPYjE5eU9vc2s2QkxBcE1MV1FqUlNDeXdqCkxSY09lNzBHVFNoMFczSGJ0SUZSem5yTnZEQXh1VzFUT2VWUDFIZ2tFVzA4OHlmSDhhSnVzcmxxdTNTWnRVR1EKTW1MSFRnNXNuNEZRQ0pxNjZuY211NE9FT0FxclcwRFVJK3dSem9haUs0OVhsYnk3ZWVFWmw0UWVLSFRLNWxDSApTbm1BbFQxVjkrY054VjJ4NXlEUVRQbnJsNlJjTTdOWHk1Zm0yaXBmRm9wZHg0NllTY3N6NHpFZVI0TWRSMXFVCnNadnpZdWVudXNCRGoraVlZcWRJOHQvWWk1NkdzeHpNOEJQVS9Gd1RBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNad0szT1cyTGRDTWxzQUpDaDZPTUtiZm1RRE5yVDNSc2UKSlJFcUJSbDFhQXNua2hCVHVqb2tKeXBZMGUyMHlHbFJ2MUZpU0tab042L3gxTklqWFVMYmllSnRlNlIvU25EZgppalBJUVVCQ2RXdWtTNG5YNE5MVXlqNXNYOStFTUlQaVk5UzdIQS9xWFJJT2EycWRrcmpkY0RCTWhPVnR3WVFyCkZYTVUxb3JJOGMwSG1FeXI0SGNEaHRUUmlCc0cweGFpWEdhTzhOemp5aVJ0aHdyWk9YWWRvNEg2UVBLdkp0TTAKRlJXWnJyVncwRkIybGxqR1pZa3czdmJlejFOTkIvSk0zSTdabm9lajV6bk0wbjk1eDI5ZUVmY001V0Zmc2Q1Nwp4S3U3TU85OWlHenFRRVlQUVFWZEd1NDZGZDNEUmFaRWZ4K3BlckV5VmF3YmVrOEtUNW1MCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMW9FbXlYU0p6ZXl4WjlPZEl0ck0rZXNtRUtCSTVNQmI3ckJPMEFNbUdZZ1JYclpWCnlnRmNpRHIyZnFNWWphNmlncE9TM3krUGZZTWVxR3ZoYlFQRWptOWZjanFMSk9nU3dLVEMxa0kwVWdzc0l5MFgKRG51OUJrMG9kRnR4MjdTQlVjNTZ6Ynd3TWJsdFV6bmxUOVI0SkJGdFBQTW54L0dpYnJLNWFydDBtYlZCa0RKaQp4MDRPYkorQlVBaWF1dXAzSnJ1RGhEZ0txMXRBMUNQc0VjNkdvaXVQVjVXOHUzbmhHWmVFSGloMHl1WlFoMHA1CmdKVTlWZmZuRGNWZHNlY2cwRXo1NjVla1hET3pWOHVYNXRvcVh4YUtYY2VPbUVuTE0rTXhIa2VESFVkYWxMR2IKODJMbnA3ckFRNC9vbUdLblNQTGYySXVlaHJNY3pQQVQxUHhjRXdJREFRQUJBb0lCQUIyMHZSNWhHVVIvWndJdAorREQvaEN1SU9UbE1PVXdVcDZhaW5BZUtxQmdaRSs2OTZadVVITEJ4R2ZubnRGckt1STdFeVM1SGMrTzU2T0VDCkw3SGRON2RTRFRIUWtieUd0ekllbnl6MDlqSDJnaUpNK0VoMU1uUlE4eTFLRExhVWhPUkRhQlpkM1g3Rll6S0gKYmc1a0trODBhcUJxUERRZ2JwSk9CZ2VWOWt2aTRVS2Vnd2Jrc091NEZKUG5nTUN0RGEyOFZ6SENnVGlnRlF5aApUVThPMm1wcVpSR1lvYjFYQlRxMWx3bzdST011c2V2MnRPeG9CR1JlT0dnS0JnWkthRDRmRnJLdmZxcnh3eTRxCnBRVm1nL2xvTzJLZDZpQ3llVEN0ekE1ekVVb0wxUEgrVG5Tb1RVc3NtV1F3UC9FeTEwd1pyN2FWQnhpei9KSVIKSVNjbUpXRUNnWUVBOHd2ZVRvVklhRjVMWCs1a3d6WEVuaENGK1BZYlZveDk0UGVCL0J5NUR1NHRzZm1yc2hKLwpHellBSk9qM3l1RXErTHk4ZVpWUzVnV3E0UUd3NVhRbWZGclU3WW1lVFBmOGF1SXhUWmw0cWM4Vm5iOXY0eC9PCjkweHp2cGNxZjlhdUhrU012cHlJYUpNbjkwRGFuUURxRVJFT20wRUxsYmlOUE9rZy9ydTMvdWNDZ1lFQTRlL2IKYkRqSFF2dm84RENyOGw0UE4zRlFsODhxQzdLRUZTYk9IQ3l6dURRR2REYlVMQjBPR3ord21HcEQrMDIwNFhuQgpGWnM5V3JBRUFRVG5TQTVhazc3djJHN2pFNkN0azVwVkNlQytVWVJEbE4rRXgyQ29JVk52L2FKVU1RMGpsbWlsCjdIeXZWNXM3cXhiNGJDaENoNVM0Qzdoc2xNVzJRVE13bGRML0wvVUNnWUVBM2VwRlJnNmVTV1ZuanlUOWJkd24KTldmQzI4bml0a2k3R3ZFREIyNDJibko4MkpjdDlQNjhmZHoxanI0RW1vS3ptTC9EbTRRRFdERnVqOW5hYWZkKwp1R2E3S2xSUWJOaTA2ZWF6dTdYWW5idU9jaVY4aExYalpKdXl4eUFCVnc1dWx3WmlPQngyMUgwZ3JiclNvUzVYCmlkTzRNWHZYbHhJV0s3cDFQUUdyZzVzQ2dZQUpOR3B1R0VvVjhvbGs3N2F4b3g5ZmxPQkJyeEQ1ZFFab2pqSXIKZDY3Q3ZHdmU1RFQwcnlKWi9kaEYvVjVUcUxETDF0Z0U5MVFpazdVMkRXc1d4bTd1UWdNbmdDMEVLYkdvcDhyNwpJZ3JlNjFLTmlDV3lzYjluekN4dDJ1VXZNbWZXd3VDdnA4ekU5dkFSWWxnd245dEdCc3NRdnl5OVN1akg4enZ4CmZxMGkyUUtCZ1FDMzEwZEFzWmI2YkxscGt0WGNhZ2lRelRnUHV5OCt2elk0RGhDbHRaNTZPQnFhRkwrNlZEcXoKRHlobkV4QURCM21LVnJ0ckM3d2dTbndwS21iaTEyY3U0Q3AzMlVkLzdOc1c3Uktxc0UxNXlEandxWFo2ZnN2aQpneXdZcy9KbVlnSDdXY2piVk5haisvRVVZeGtmRzZnSTdDRGdXZXE1eHFMS1JPVlhhWWZmbkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-control-plane/templates/config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-config
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
data:
  linkerd-crds-chart-version: linkerd-crds-1.0.0-edge
  values: |
    clusterDomain: cluster.local
    clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
    cniEnabled: false
    commonLabels: {}
    controlPlaneTracing: false
    controlPlaneTracingNamespace: linkerd-jaeger
    controllerImage: cr.l5d.io/linkerd/controller
    controllerImageVersion: ""
    controllerLogFormat: plain
    controllerLogLevel: info
    controllerReplicas: 1
    controllerUID: 2103
    debugContainer:
      image:
        name: cr.l5d.io/linkerd/debug
        pullPolicy: ""
        version: ""
    deploymentStrategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
    disableHeartBeat: false
    enableEndpointSlices: true
    enableH2Upgrade: true
    enablePSP: false
    enablePodAntiAffinity: false
    enablePodDisruptionBudget: false
    enablePprof: false
    identity:
      externalCA: true
      issuer:
        clockSkewAllowance: 20s
        issuanceLifetime: 24h0m0s
        scheme: kubernetes.io/tls
        tls:
          crtPEM: ""
      kubeAPI:
        clientBurst: 200
        clientQPS: 100
      serviceAccountTokenProjection: true
    identityTrustAnchorsPEM: ""
    identityTrustDomain: cluster.local
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    kubeAPI:
      clientBurst: 200
      clientQPS: 100
    linkerdVersion: stable-2.14.10
    networkValidator:
      connectAddr: 1.1.1.1:20001
      enableSecurityContext: true
      listenAddr: 0.0.0.0:4140
      logFormat: plain
      logLevel: debug
      timeout: 10s
    nodeSelector:
      kubernetes.io/os: linux
    podAnnotations: {}
    podLabels: {}
    podMonitor:
      controller:
        enabled: true
        namespaceSelector: |
          matchNames:
            - {{ .Release.Namespace }}
            - linkerd-viz
            - linkerd-jaeger
      enabled: false
      labels: {}
      proxy:
        enabled: true
      scrapeInterval: 10s
      scrapeTimeout: 10s
      serviceMirror:
        enabled: true
    policyController:
      image:
        name: cr.l5d.io/linkerd/policy-controller
        pullPolicy: ""
        version: ""
      logLevel: info
      probeNetworks:
      - 0.0.0.0/0
      resources:
        cpu:
          limit: ""
          request: ""
        ephemeral-storage:
          limit: ""
          request: ""
        memory:
          limit: ""
          request: ""
    policyValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    priorityClassName: ""
    profileValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    prometheusUrl: ""
    proxy:
      await: true
      cores: 0
      defaultInboundPolicy: all-unauthenticated
      disableInboundProtocolDetectTimeout: false
      disableOutboundProtocolDetectTimeout: false
      enableExternalProfiles: false
      image:
        name: cr.l5d.io/linkerd/proxy
        pullPolicy: ""
        version: ""
      inboundConnectTimeout: 100ms
      inboundDiscoveryCacheUnusedTimeout: 90s
      logFormat: plain
      logLevel: warn,linkerd=info,trust_dns=error
      opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
      outboundConnectTimeout: 1000ms
      outboundDiscoveryCacheUnusedTimeout: 5s
      ports:
        admin: 4191
        control: 4190
        inbound: 4143
        outbound: 4140
      requireIdentityOnInboundPorts: ""
      resources:
        cpu:
          limit: ""
          request: ""
        ephemeral-storage:
          limit: ""
          request: ""
        memory:
          limit: ""
          request: ""
      shutdownGracePeriod: ""
      uid: 2102
      waitBeforeExitSeconds: 0
    proxyInit:
      closeWaitTimeoutSecs: 0
      ignoreInboundPorts: 4567,4568
      ignoreOutboundPorts: 4567,4568
      image:
        name: cr.l5d.io/linkerd/proxy-init
        pullPolicy: ""
        version: v2.2.3
      iptablesMode: legacy
      kubeAPIServerPorts: 443,6443
      logFormat: ""
      logLevel: ""
      privileged: false
      resources:
        cpu:
          limit: 100m
          request: 100m
        ephemeral-storage:
          limit: ""
          request: ""
        memory:
          limit: 20Mi
          request: 20Mi
      runAsRoot: true
      runAsUser: 65534
      skipSubnets: ""
      xtMountPath:
        mountPath: /run
        name: linkerd-proxy-init-xtables-lock
    proxyInjector:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      injectCaFrom: ""
      injectCaFromSecret: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values:
          - kube-system
          - cert-manager
      objectSelector:
        matchExpressions:
        - key: linkerd.io/control-plane-component
          operator: DoesNotExist
        - key: linkerd.io/cni-resource
          operator: DoesNotExist
    runtimeClassName: ""
    webhookFailurePolicy: Ignore
---
# Source: linkerd-control-plane/templates/destination-rbac.yaml
###
### Destination Controller Service
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["list", "get", "watch"]
  - apiGroups: [""]
    resources: ["pods", "endpoints", "services", "nodes"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["linkerd.io"]
    resources: ["serviceprofiles"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["discovery.k8s.io"]
    resources: ["endpointslices"]
    verbs: ["list", "get", "watch"]
---
# Source: linkerd-control-plane/templates/destination-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - get
  - apiGroups:
      - policy.linkerd.io
    resources:
      - authorizationpolicies
      - httproutes
      - meshtlsauthentications
      - networkauthentications
      - servers
      - serverauthorizations
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - httproutes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy.linkerd.io
    resources:
      - httproutes/status
    verbs:
      - patch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - httproutes/status
    verbs:
      - patch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - patch
---
# Source: linkerd-control-plane/templates/heartbeat-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-heartbeat
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list"]
  - apiGroups: ["linkerd.io"]
    resources: ["serviceprofiles"]
    verbs: ["list"]
---
# Source: linkerd-control-plane/templates/identity-rbac.yaml
###
### Identity Controller Service RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups: ["authentication.k8s.io"]
    resources: ["tokenreviews"]
    verbs: ["create"]
  # TODO(ver) Restrict this to the Linkerd namespace. See
  # https://github.com/linkerd/linkerd2/issues/9367
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: linkerd-control-plane/templates/proxy-injector-rbac.yaml
###
### Proxy Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  - apiGroups: [""]
    resources: ["namespaces", "replicationcontrollers"]
    verbs: ["list", "get", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list", "watch"]
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["extensions", "batch"]
    resources: ["cronjobs", "jobs"]
    verbs: ["list", "get", "watch"]
---
# Source: linkerd-control-plane/templates/destination-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-destination
subjects:
  - kind: ServiceAccount
    name: linkerd-destination
    namespace: linkerd
---
# Source: linkerd-control-plane/templates/destination-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-destination-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-policy
subjects:
  - kind: ServiceAccount
    name: linkerd-destination
    namespace: linkerd
---
# Source: linkerd-control-plane/templates/heartbeat-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-heartbeat
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: ClusterRole
  name: linkerd-heartbeat
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: linkerd-heartbeat
    namespace: linkerd
---
# Source: linkerd-control-plane/templates/identity-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-identity
subjects:
  - kind: ServiceAccount
    name: linkerd-identity
    namespace: linkerd
---
# Source: linkerd-control-plane/templates/proxy-injector-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
subjects:
  - kind: ServiceAccount
    name: linkerd-proxy-injector
    namespace: linkerd
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-proxy-injector
  apiGroup: rbac.authorization.k8s.io
---
# Source: linkerd-control-plane/templates/config-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
  name: ext-namespace-metadata-linkerd-config
  namespace: linkerd
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
    resourceNames: ["linkerd-config"]
---
# Source: linkerd-control-plane/templates/destination-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: remote-discovery
  namespace: linkerd
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
---
# Source: linkerd-control-plane/templates/heartbeat-rbac.yaml
###
### Heartbeat RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
    resourceNames: ["linkerd-config"]
---
# Source: linkerd-control-plane/templates/destination-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-destination-remote-discovery
  namespace: linkerd
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: remote-discovery
subjects:
  - kind: ServiceAccount
    name: linkerd-destination
    namespace: linkerd
---
# Source: linkerd-control-plane/templates/heartbeat-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: Role
  name: linkerd-heartbeat
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: linkerd-heartbeat
    namespace: linkerd
---
# Source: linkerd-control-plane/templates/destination.yaml
###
### Destination Controller Service
###
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
    - name: grpc
      port: 8086
      targetPort: 8086
---
# Source: linkerd-control-plane/templates/destination.yaml
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
    - name: grpc
      port: 8086
      targetPort: 8086
---
# Source: linkerd-control-plane/templates/destination.yaml
kind: Service
apiVersion: v1
metadata:
  name: linkerd-sp-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
    - name: sp-validator
      port: 443
      targetPort: sp-validator
---
# Source: linkerd-control-plane/templates/destination.yaml
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
    - name: grpc
      port: 8090
      targetPort: 8090
---
# Source: linkerd-control-plane/templates/destination.yaml
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
    - name: policy-https
      port: 443
      targetPort: policy-https
---
# Source: linkerd-control-plane/templates/identity.yaml
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: identity
  ports:
    - name: grpc
      port: 8080
      targetPort: 8080
---
# Source: linkerd-control-plane/templates/identity.yaml
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: identity
  ports:
    - name: grpc
      port: 8080
      targetPort: 8080
---
# Source: linkerd-control-plane/templates/proxy-injector.yaml
kind: Service
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    config.linkerd.io/opaque-ports: "443"
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: proxy-injector
  ports:
    - name: proxy-injector
      port: 443
      targetPort: proxy-injector
---
# Source: linkerd-control-plane/templates/destination.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
  labels:
    app.kubernetes.io/name: destination
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-destination
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: destination
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-destination
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        checksum/config: 48090a0c7117749e14cd7b8d70461041b68a0824b68e2ab4d26123a6619ac69f
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/proxy-version: stable-2.14.10
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        linkerd.io/trust-root-sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: destination
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-destination
    spec:
      nodeSelector:
        kubernetes.io/os: linux

      containers:
        - env:
            - name: _pod_name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: _pod_ns
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: _pod_nodeName
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: LINKERD2_PROXY_LOG
              value: "warn,linkerd=info,trust_dns=error"
            - name: LINKERD2_PROXY_LOG_FORMAT
              value: "plain"
            - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
              value: localhost.:8086
            - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
              value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
            - name: LINKERD2_PROXY_POLICY_SVC_ADDR
              value: localhost.:8090
            - name: LINKERD2_PROXY_POLICY_WORKLOAD
              value: "$(_pod_ns):$(_pod_name)"
            - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
              value: all-unauthenticated
            - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
              value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
            - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
              value: "100ms"
            - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
              value: "1000ms"
            - name: LINKERD2_PROXY_OUTBOUND_DISCOVERY_IDLE_TIMEOUT
              value: "5s"
            - name: LINKERD2_PROXY_INBOUND_DISCOVERY_IDLE_TIMEOUT
              value: "90s"
            - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
              value: 0.0.0.0:4190
            - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
              value: 0.0.0.0:4191
            - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
              value: 127.0.0.1:4140
            - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
              value: 0.0.0.0:4143
            - name: LINKERD2_PROXY_INBOUND_IPS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIPs
            - name: LINKERD2_PROXY_INBOUND_PORTS
              value: "8086,8090,8443,9443,9990,9996,9997"
            - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
              value: svc.cluster.local.
            - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
              value: 10000ms
            - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
              value: 10000ms
            - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
              value: "25,587,3306,4444,5432,6379,9300,11211"
            - name: LINKERD2_PROXY_DESTINATION_CONTEXT
              value: |
                {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)", "pod":"$(_pod_name)"}
            - name: _pod_sa
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
            - name: _l5d_ns
              value: linkerd
            - name: _l5d_trustdomain
              value: cluster.local
            - name: LINKERD2_PROXY_IDENTITY_DIR
              value: /var/run/linkerd/identity/end-entity
            - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
              valueFrom:
                configMapKeyRef:
                  name: linkerd-identity-trust-roots
                  key: ca-bundle.crt
            - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
              value: /var/run/secrets/tokens/linkerd-identity-token
            - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
              value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
            - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
              value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
            - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
              value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
            - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
              value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
            - name: LINKERD2_PROXY_POLICY_SVC_NAME
              value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
          image: cr.l5d.io/linkerd/proxy:stable-2.14.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /live
              port: 4191
            initialDelaySeconds: 10
          name: linkerd-proxy
          ports:
            - containerPort: 4143
              name: linkerd-proxy
            - containerPort: 4191
              name: linkerd-admin
          readinessProbe:
            httpGet:
              path: /ready
              port: 4191
            initialDelaySeconds: 2
          resources:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2102
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePolicy: FallbackToLogsOnError
          lifecycle:
            postStart:
              exec:
                command:
                  - /usr/lib/linkerd/linkerd-await
                  - --timeout=2m
                  - --port=4191
          volumeMounts:
            - mountPath: /var/run/linkerd/identity/end-entity
              name: linkerd-identity-end-entity
            - mountPath: /var/run/secrets/tokens
              name: linkerd-identity-token
        - args:
            - destination
            - -addr=:8086
            - -controller-namespace=linkerd
            - -enable-h2-upgrade=true
            - -log-level=info
            - -log-format=plain
            - -enable-endpoint-slices=true
            - -cluster-domain=cluster.local
            - -identity-trust-domain=cluster.local
            - -default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211
            - -enable-pprof=false
          image: cr.l5d.io/linkerd/controller:stable-2.14.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9996
            initialDelaySeconds: 10
          name: destination
          ports:
            - containerPort: 8086
              name: grpc
            - containerPort: 9996
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9996
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2103
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
        - args:
            - sp-validator
            - -log-level=info
            - -log-format=plain
            - -enable-pprof=false
          image: cr.l5d.io/linkerd/controller:stable-2.14.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9997
            initialDelaySeconds: 10
          name: sp-validator
          ports:
            - containerPort: 8443
              name: sp-validator
            - containerPort: 9997
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9997
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2103
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /var/run/linkerd/tls
              name: sp-tls
              readOnly: true
        - args:
            - --admin-addr=0.0.0.0:9990
            - --control-plane-namespace=linkerd
            - --grpc-addr=0.0.0.0:8090
            - --server-addr=0.0.0.0:9443
            - --server-tls-key=/var/run/linkerd/tls/tls.key
            - --server-tls-certs=/var/run/linkerd/tls/tls.crt
            - --cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
            - --identity-domain=cluster.local
            - --cluster-domain=cluster.local
            - --default-policy=all-unauthenticated
            - --log-level=info
            - --log-format=plain
            - --default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211
            - --probe-networks=0.0.0.0/0
          image: cr.l5d.io/linkerd/policy-controller:stable-2.14.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /live
              port: admin-http
          name: policy
          ports:
            - containerPort: 8090
              name: grpc
            - containerPort: 9990
              name: admin-http
            - containerPort: 9443
              name: policy-https
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: admin-http
            initialDelaySeconds: 10
          resources:
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2103
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /var/run/linkerd/tls
              name: policy-tls
              readOnly: true
      initContainers:
        - args:
            - --incoming-proxy-port
            - "4143"
            - --outgoing-proxy-port
            - "4140"
            - --proxy-uid
            - "2102"
            - --inbound-ports-to-ignore
            - "4190,4191,4567,4568"
            - --outbound-ports-to-ignore
            - "443,6443"
          image: cr.l5d.io/linkerd/proxy-init:v2.2.3
          imagePullPolicy: IfNotPresent
          name: linkerd-init
          resources:
            limits:
              cpu: "100m"
              memory: "20Mi"
            requests:
              cpu: "100m"
              memory: "20Mi"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
            privileged: false
            runAsNonRoot: false
            runAsUser: 0
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /run
              name: linkerd-proxy-init-xtables-lock
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: linkerd-destination
      volumes:
        - name: sp-tls
          secret:
            secretName: linkerd-sp-validator-k8s-tls
        - name: policy-tls
          secret:
            secretName: linkerd-policy-validator-k8s-tls
        - emptyDir: {}
          name: linkerd-proxy-init-xtables-lock
        - name: linkerd-identity-token
          projected:
            sources:
              - serviceAccountToken:
                  path: linkerd-identity-token
                  expirationSeconds: 86400
                  audience: identity.l5d.io
        - emptyDir:
            medium: Memory
          name: linkerd-identity-end-entity
---
# Source: linkerd-control-plane/templates/identity.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-identity
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: identity
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-identity
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/proxy-version: stable-2.14.10
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        linkerd.io/trust-root-sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: identity
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-identity
    spec:
      nodeSelector:
        kubernetes.io/os: linux

      containers:
        - args:
            - identity
            - -log-level=info
            - -log-format=plain
            - -controller-namespace=linkerd
            - -identity-trust-domain=cluster.local
            - -identity-issuance-lifetime=24h0m0s
            - -identity-clock-skew-allowance=20s
            - -identity-scheme=kubernetes.io/tls
            - -enable-pprof=false
            - -kube-apiclient-qps=100
            - -kube-apiclient-burst=200
          env:
            - name: LINKERD_DISABLED
              value: "linkerd-await cannot block the identity controller"
          image: cr.l5d.io/linkerd/controller:stable-2.14.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9990
            initialDelaySeconds: 10
          name: identity
          ports:
            - containerPort: 8080
              name: grpc
            - containerPort: 9990
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9990
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2103
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /var/run/linkerd/identity/issuer
              name: identity-issuer
            - mountPath: /var/run/linkerd/identity/trust-roots/
              name: trust-roots
        - env:
            - name: _pod_name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: _pod_ns
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: _pod_nodeName
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS
              value: "8080"
            - name: LINKERD2_PROXY_LOG
              value: "warn,linkerd=info,trust_dns=error"
            - name: LINKERD2_PROXY_LOG_FORMAT
              value: "plain"
            - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
              value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
            - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
              value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
            - name: LINKERD2_PROXY_POLICY_SVC_ADDR
              value: linkerd-policy.linkerd.svc.cluster.local.:8090
            - name: LINKERD2_PROXY_POLICY_WORKLOAD
              value: "$(_pod_ns):$(_pod_name)"
            - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
              value: all-unauthenticated
            - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
              value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
            - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
              value: "100ms"
            - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
              value: "1000ms"
            - name: LINKERD2_PROXY_OUTBOUND_DISCOVERY_IDLE_TIMEOUT
              value: "5s"
            - name: LINKERD2_PROXY_INBOUND_DISCOVERY_IDLE_TIMEOUT
              value: "90s"
            - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
              value: 0.0.0.0:4190
            - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
              value: 0.0.0.0:4191
            - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
              value: 127.0.0.1:4140
            - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
              value: 0.0.0.0:4143
            - name: LINKERD2_PROXY_INBOUND_IPS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIPs
            - name: LINKERD2_PROXY_INBOUND_PORTS
              value: "8080,9990"
            - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
              value: svc.cluster.local.
            - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
              value: 10000ms
            - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
              value: 10000ms
            - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
              value: "25,587,3306,4444,5432,6379,9300,11211"
            - name: LINKERD2_PROXY_DESTINATION_CONTEXT
              value: |
                {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)", "pod":"$(_pod_name)"}
            - name: _pod_sa
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
            - name: _l5d_ns
              value: linkerd
            - name: _l5d_trustdomain
              value: cluster.local
            - name: LINKERD2_PROXY_IDENTITY_DIR
              value: /var/run/linkerd/identity/end-entity
            - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
              valueFrom:
                configMapKeyRef:
                  name: linkerd-identity-trust-roots
                  key: ca-bundle.crt
            - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
              value: /var/run/secrets/tokens/linkerd-identity-token
            - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
              value: localhost.:8080
            - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
              value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
            - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
              value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
            - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
              value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
            - name: LINKERD2_PROXY_POLICY_SVC_NAME
              value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
          image: cr.l5d.io/linkerd/proxy:stable-2.14.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /live
              port: 4191
            initialDelaySeconds: 10
          name: linkerd-proxy
          ports:
            - containerPort: 4143
              name: linkerd-proxy
            - containerPort: 4191
              name: linkerd-admin
          readinessProbe:
            httpGet:
              path: /ready
              port: 4191
            initialDelaySeconds: 2
          resources:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2102
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /var/run/linkerd/identity/end-entity
              name: linkerd-identity-end-entity
            - mountPath: /var/run/secrets/tokens
              name: linkerd-identity-token
      initContainers:
        - args:
            - --incoming-proxy-port
            - "4143"
            - --outgoing-proxy-port
            - "4140"
            - --proxy-uid
            - "2102"
            - --inbound-ports-to-ignore
            - "4190,4191,4567,4568"
            - --outbound-ports-to-ignore
            - "443,6443"
          image: cr.l5d.io/linkerd/proxy-init:v2.2.3
          imagePullPolicy: IfNotPresent
          name: linkerd-init
          resources:
            limits:
              cpu: "100m"
              memory: "20Mi"
            requests:
              cpu: "100m"
              memory: "20Mi"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
            privileged: false
            runAsNonRoot: false
            runAsUser: 0
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /run
              name: linkerd-proxy-init-xtables-lock
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: linkerd-identity
      volumes:
        - name: identity-issuer
          secret:
            secretName: linkerd-identity-issuer
        - configMap:
            name: linkerd-identity-trust-roots
          name: trust-roots
        - emptyDir: {}
          name: linkerd-proxy-init-xtables-lock
        - name: linkerd-identity-token
          projected:
            sources:
              - serviceAccountToken:
                  path: linkerd-identity-token
                  expirationSeconds: 86400
                  audience: identity.l5d.io
        - emptyDir:
            medium: Memory
          name: linkerd-identity-end-entity
---
# Source: linkerd-control-plane/templates/proxy-injector.yaml
###
### Proxy Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
  labels:
    app.kubernetes.io/name: proxy-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: proxy-injector
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        checksum/config: 6d2cb3cc99b98abbd55485b7ba0cfec23c4b2c148617c70a989d1c69afa56d42
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/proxy-version: stable-2.14.10
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        linkerd.io/trust-root-sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        config.linkerd.io/opaque-ports: "8443"
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: proxy-injector
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-proxy-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux

      containers:
        - env:
            - name: _pod_name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: _pod_ns
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: _pod_nodeName
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: LINKERD2_PROXY_LOG
              value: "warn,linkerd=info,trust_dns=error"
            - name: LINKERD2_PROXY_LOG_FORMAT
              value: "plain"
            - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
              value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
            - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
              value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
            - name: LINKERD2_PROXY_POLICY_SVC_ADDR
              value: linkerd-policy.linkerd.svc.cluster.local.:8090
            - name: LINKERD2_PROXY_POLICY_WORKLOAD
              value: "$(_pod_ns):$(_pod_name)"
            - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
              value: all-unauthenticated
            - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
              value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
            - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
              value: "100ms"
            - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
              value: "1000ms"
            - name: LINKERD2_PROXY_OUTBOUND_DISCOVERY_IDLE_TIMEOUT
              value: "5s"
            - name: LINKERD2_PROXY_INBOUND_DISCOVERY_IDLE_TIMEOUT
              value: "90s"
            - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
              value: 0.0.0.0:4190
            - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
              value: 0.0.0.0:4191
            - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
              value: 127.0.0.1:4140
            - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
              value: 0.0.0.0:4143
            - name: LINKERD2_PROXY_INBOUND_IPS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIPs
            - name: LINKERD2_PROXY_INBOUND_PORTS
              value: "8443,9995"
            - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
              value: svc.cluster.local.
            - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
              value: 10000ms
            - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
              value: 10000ms
            - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
              value: "25,587,3306,4444,5432,6379,9300,11211"
            - name: LINKERD2_PROXY_DESTINATION_CONTEXT
              value: |
                {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)", "pod":"$(_pod_name)"}
            - name: _pod_sa
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
            - name: _l5d_ns
              value: linkerd
            - name: _l5d_trustdomain
              value: cluster.local
            - name: LINKERD2_PROXY_IDENTITY_DIR
              value: /var/run/linkerd/identity/end-entity
            - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
              valueFrom:
                configMapKeyRef:
                  name: linkerd-identity-trust-roots
                  key: ca-bundle.crt
            - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
              value: /var/run/secrets/tokens/linkerd-identity-token
            - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
              value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
            - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
              value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
            - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
              value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
            - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
              value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
            - name: LINKERD2_PROXY_POLICY_SVC_NAME
              value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
          image: cr.l5d.io/linkerd/proxy:stable-2.14.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /live
              port: 4191
            initialDelaySeconds: 10
          name: linkerd-proxy
          ports:
            - containerPort: 4143
              name: linkerd-proxy
            - containerPort: 4191
              name: linkerd-admin
          readinessProbe:
            httpGet:
              path: /ready
              port: 4191
            initialDelaySeconds: 2
          resources:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2102
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePolicy: FallbackToLogsOnError
          lifecycle:
            postStart:
              exec:
                command:
                  - /usr/lib/linkerd/linkerd-await
                  - --timeout=2m
                  - --port=4191
          volumeMounts:
            - mountPath: /var/run/linkerd/identity/end-entity
              name: linkerd-identity-end-entity
            - mountPath: /var/run/secrets/tokens
              name: linkerd-identity-token
        - args:
            - proxy-injector
            - -log-level=info
            - -log-format=plain
            - -linkerd-namespace=linkerd
            - -enable-pprof=false
          image: cr.l5d.io/linkerd/controller:stable-2.14.10
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /ping
              port: 9995
            initialDelaySeconds: 10
          name: proxy-injector
          ports:
            - containerPort: 8443
              name: proxy-injector
            - containerPort: 9995
              name: admin-http
          readinessProbe:
            failureThreshold: 7
            httpGet:
              path: /ready
              port: 9995
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 2103
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /var/run/linkerd/config
              name: config
            - mountPath: /var/run/linkerd/identity/trust-roots
              name: trust-roots
            - mountPath: /var/run/linkerd/tls
              name: tls
              readOnly: true
      initContainers:
        - args:
            - --incoming-proxy-port
            - "4143"
            - --outgoing-proxy-port
            - "4140"
            - --proxy-uid
            - "2102"
            - --inbound-ports-to-ignore
            - "4190,4191,4567,4568"
            - --outbound-ports-to-ignore
            - "443,6443"
          image: cr.l5d.io/linkerd/proxy-init:v2.2.3
          imagePullPolicy: IfNotPresent
          name: linkerd-init
          resources:
            limits:
              cpu: "100m"
              memory: "20Mi"
            requests:
              cpu: "100m"
              memory: "20Mi"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
            privileged: false
            runAsNonRoot: false
            runAsUser: 0
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /run
              name: linkerd-proxy-init-xtables-lock
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: linkerd-proxy-injector
      volumes:
        - configMap:
            name: linkerd-config
          name: config
        - configMap:
            name: linkerd-identity-trust-roots
          name: trust-roots
        - name: tls
          secret:
            secretName: linkerd-proxy-injector-k8s-tls
        - emptyDir: {}
          name: linkerd-proxy-init-xtables-lock
        - name: linkerd-identity-token
          projected:
            sources:
              - serviceAccountToken:
                  path: linkerd-identity-token
                  expirationSeconds: 86400
                  audience: identity.l5d.io
        - emptyDir:
            medium: Memory
          name: linkerd-identity-end-entity
---
# Source: linkerd-control-plane/templates/heartbeat.yaml
###
### Heartbeat
###
apiVersion: batch/v1
kind: CronJob
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    app.kubernetes.io/name: heartbeat
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  concurrencyPolicy: Replace
  schedule: "23 15 * * *"
  successfulJobsHistoryLimit: 0
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            linkerd.io/control-plane-component: heartbeat
            linkerd.io/workload-ns: linkerd
          annotations:
            linkerd.io/created-by: linkerd/helm stable-2.14.10
        spec:
          nodeSelector:
            kubernetes.io/os: linux
          securityContext:
            seccompProfile:
              type: RuntimeDefault
          serviceAccountName: linkerd-heartbeat
          restartPolicy: Never
          containers:
            - name: heartbeat
              image: cr.l5d.io/linkerd/controller:stable-2.14.10
              imagePullPolicy: IfNotPresent
              env:
                - name: LINKERD_DISABLED
                  value: "the heartbeat controller does not use the proxy"
              args:
                - "heartbeat"
                - "-controller-namespace=linkerd"
                - "-log-level=info"
                - "-log-format=plain"
                - "-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090"
              securityContext:
                capabilities:
                  drop:
                    - ALL
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 2103
                allowPrivilegeEscalation: false
                seccompProfile:
                  type: RuntimeDefault
---
# Source: linkerd-control-plane/templates/identity.yaml
###
### Identity Controller Service
###
---
# Source: linkerd-control-plane/templates/proxy-injector-rbac.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-proxy-injector-webhook-config
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
webhooks:
  - name: linkerd-proxy-injector.linkerd.io
    namespaceSelector:
      matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
            - disabled
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values:
            - kube-system
            - cert-manager
    objectSelector:
      matchExpressions:
        - key: linkerd.io/control-plane-component
          operator: DoesNotExist
        - key: linkerd.io/cni-resource
          operator: DoesNotExist
    clientConfig:
      service:
        name: linkerd-proxy-injector
        namespace: linkerd
        path: "/"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUxJS243dU1DV2xFS3hqNjgvSFJwSnN3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TlRFd01ERXhOVEV6TXpWYUZ3MHlOakV3TURFeE5URXpNelZhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRFdnU2JKZEluTjdMRm4wNTBpMnN6NTZ5WVFvRWprd0Z2dXNFN1FBeVlaaUJGZQp0bFhLQVZ5SU92WitveGlOcnFLQ2s1TGZMNDk5Z3g2b2ErRnRBOFNPYjE5eU9vc2s2QkxBcE1MV1FqUlNDeXdqCkxSY09lNzBHVFNoMFczSGJ0SUZSem5yTnZEQXh1VzFUT2VWUDFIZ2tFVzA4OHlmSDhhSnVzcmxxdTNTWnRVR1EKTW1MSFRnNXNuNEZRQ0pxNjZuY211NE9FT0FxclcwRFVJK3dSem9haUs0OVhsYnk3ZWVFWmw0UWVLSFRLNWxDSApTbm1BbFQxVjkrY054VjJ4NXlEUVRQbnJsNlJjTTdOWHk1Zm0yaXBmRm9wZHg0NllTY3N6NHpFZVI0TWRSMXFVCnNadnpZdWVudXNCRGoraVlZcWRJOHQvWWk1NkdzeHpNOEJQVS9Gd1RBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNad0szT1cyTGRDTWxzQUpDaDZPTUtiZm1RRE5yVDNSc2UKSlJFcUJSbDFhQXNua2hCVHVqb2tKeXBZMGUyMHlHbFJ2MUZpU0tab042L3gxTklqWFVMYmllSnRlNlIvU25EZgppalBJUVVCQ2RXdWtTNG5YNE5MVXlqNXNYOStFTUlQaVk5UzdIQS9xWFJJT2EycWRrcmpkY0RCTWhPVnR3WVFyCkZYTVUxb3JJOGMwSG1FeXI0SGNEaHRUUmlCc0cweGFpWEdhTzhOemp5aVJ0aHdyWk9YWWRvNEg2UVBLdkp0TTAKRlJXWnJyVncwRkIybGxqR1pZa3czdmJlejFOTkIvSk0zSTdabm9lajV6bk0wbjk1eDI5ZUVmY001V0Zmc2Q1Nwp4S3U3TU85OWlHenFRRVlQUVFWZEd1NDZGZDNEUmFaRWZ4K3BlckV5VmF3YmVrOEtUNW1MCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
    failurePolicy: Ignore
    admissionReviewVersions: ["v1", "v1beta1"]
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods", "services"]
    sideEffects: None
---
# Source: linkerd-control-plane/templates/destination-rbac.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-sp-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
  - name: linkerd-sp-validator.linkerd.io
    namespaceSelector:
      matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
            - disabled
    clientConfig:
      service:
        name: linkerd-sp-validator
        namespace: linkerd
        path: "/"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRRnUrdmd4bjdYTlRteFBydjhsR3ZGekFOQmdrcWhraUc5dzBCQVFzRkFEQXIKTVNrd0p3WURWUVFERXlCc2FXNXJaWEprTFhOd0xYWmhiR2xrWVhSdmNpNXNhVzVyWlhKa0xuTjJZekFlRncweQpOVEV3TURFeE5URXpNelphRncweU5qRXdNREV4TlRFek16WmFNQ3N4S1RBbkJnTlZCQU1USUd4cGJtdGxjbVF0CmMzQXRkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBelBWVVZpYnk0bjZCeTRlSjFVVy9zaGVhWkdwMTlONDRvU2p3MEFDT3FUMDltTlBYUzlKQQpway9KdU1Ma2I4YlJaQ0NEMlFFc1NtakRhc1BaYk53Q1A4T2YvcXRkN296ZjNNcW5LWmR0NlA3NmdpZmMxTkxrCnZhTDRhaXRQQ3AzczZNMjFjNTlWWnlXRSthS2NmK25aNUFXOFhhY2gzRzdKSDFTdFo2bTlvZ1hKRmlSaDNzQisKc3VPQWRWUVdxVmgwbGxNaFF2bWhGd2czMEJSL0Z3U0E0Q09Ob1Q5WlRoc0pyY3VFM1pibGZ3ZENZTVdtdWt0RQpIZFFaR1BoRmZzU0IvTzNGbXpyU1NFUXdOaUdvR0tIUTUyOUVEbmJVV29nbHZ5TGNON3N0bVlsS2xURUVwU05CCmVjdHJDNURsbkROZXlqWWZOZWRJS29qbGc3UFozZklsOXdJREFRQUJvMnd3YWpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpLd1lEVlIwUkJDUXdJb0lnYkdsdWEyVnlaQzF6Y0MxMllXeHBaR0YwYjNJdWJHbHVhMlZ5WkM1emRtTXdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUdJNUZyTHIydmQ5UGNwRkhJenhhcTJ6YnR6akt4ejBiTFhyWDdvN01JZXkKWHlxbHoxS0xsdGxhOTF0N1JZREVYRzZZQ2FSYkZjcjdvT3JudktFZjd3RENoaHVkelZZNGkrRENTQXNLTG5XSwpiRGl4bTZQenUreU1UWjE2eEZQOW5SaUtSSkNlUytLMllkcGxUSldRZlIyVHlyeWVZOXNIQ0JmK3JKcUhPTDVwClY0VmZPNnBTYVBEL0hMcktHYW1tcGEzQzB1ME9Ga3RleTVoK09uMXNqdldqcnZ6c2FiMnhwbjhZelNkTDdZM0oKTXJIRFF4Nk5YVlN3TDVTQjlRaVlHTHVwbndScjNPYVNSQ1o2VG9xS3prbmRGRy91KytrYVEydGl5SnhSMzgyaQpNcXFXY2pNWUlRRHFqNUJ0T3FQK0pGcDJCQnQydzQ0YTliTkx4RWxMTUg4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
    failurePolicy: Ignore
    admissionReviewVersions: ["v1", "v1beta1"]
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: ["linkerd.io"]
        apiVersions: ["v1alpha1", "v1alpha2"]
        resources: ["serviceprofiles"]
    sideEffects: None
---
# Source: linkerd-control-plane/templates/destination-rbac.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-policy-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
  - name: linkerd-policy-validator.linkerd.io
    namespaceSelector:
      matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
            - disabled
    clientConfig:
      service:
        name: linkerd-policy-validator
        namespace: linkerd
        path: "/"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRYW8yV0JhMDg1Q3hCdUdReEVaU0dVVEFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpVeE1EQXhNVFV4TXpNMldoY05Nall4TURBeE1UVXhNek0yV2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURUOHVvTlMyZDhVODB3MUU0dU12SUhseVkzVlNnenFnbjZCeGkrUk9ELwp3WmVaeUxXVFdEajV2N0NEVTRVcmZMNEx6ZHdQQnNxR1F1czhFOHVwRkp1SmIzMUgrdkF3cFFBdEN6ME9QVjc1Cm5NUE52OWloUHh2N0hnbGhxeStYUmgyaDVVWWt0SzFkVGpFdHhicXFzSWNWTy9nRG9WZzREaHhTT3I1WlRqUDUKbzhFTktsb0hNWDBqRVNZMUcwalkwbG14azFKZS9BVlNKYmlDQjd2QVptSHJQRVF0aXF6K3E0NVhTSjE4VzE1Twpvd1lvN0ZYNTgrS280TFVpWUx0MHNTNlcvUGdmSU14cUJKYi9NUXphZTdjeEFwUnRGcWtUaDJnZEEyUE5kcG5yCi9WMG9kN053OE55TEgyV09WVlZkeGU5QjFVVFZxOHlXcGNJZStHbG1Ed1czQWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFITTk5ZG03WlRydm1vblRwbWlBeWhOQ2FKSi8KeDVhczNZZXA0NWpnRitHR3lvckQ0R2RleWJxYTFxYW9UcGVpQ3ZPQ0l1UWFlWkR4Mkx4eEVLekVLRFVGWmN5eApxdGVOdTBjaE8rMTUxWHBadHVWOUJ5ZXNldXhaYnp1NkxOVnYwRE1sOFB3WUx6N3Yxa0tOMDVrTVpKQnZFRC84CmsveEY3OFVqT1lvekRrZVdiaUNTbEhTM2RDNm8vOFV6VmYwZENIc0N0ZnM4WGIxL2pCSFhoZUJ6RWI4WXQ5OEUKM3BUMDNrL2tRdzM4QVZicU5VSFliRHEvZDBsT1lNcUthMENKOWwwWjFML3ZydmhTRTlyZitFL0UwSDc2SUhLOQpQRWhidEFrdlRITW03bWdaQS93ekdNR0dYSGtJYkJaNFNnQzJ5a0xiNXF3emQ4S2s4ZDNHTGRJMENOMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
    failurePolicy: Ignore
    admissionReviewVersions: ["v1", "v1beta1"]
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: ["policy.linkerd.io"]
        apiVersions: ["*"]
        resources:
          - authorizationpolicies
          - httproutes
          - networkauthentications
          - meshtlsauthentications
          - serverauthorizations
          - servers
    sideEffects: None
