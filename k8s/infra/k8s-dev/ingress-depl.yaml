apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
  strategy:
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: traefik
    spec:
      serviceAccountName: traefik-ingress-controller
      containers:
        - name: traefik
          image: traefik:v2.4
          args:
            - --api=true
            - --api.dashboard=true

            - --accesslog

            - --entrypoints.http.address=:80
            - --entrypoints.https.address=:443

            #
            # Email address used for registration.
            #
            # Required
            #
            - --certificatesresolvers.pebble.acme.email=dj@vasile.com
            #
            # Use a HTTP-01 ACME challenge.
            #
            # Optional (but recommended)
            #
            - --certificatesresolvers.pebble.acme.httpchallenge=true
            #
            # EntryPoint to use for the HTTP-01 challenges.
            #
            # Required
            #
            - --certificatesresolvers.pebble.acme.httpchallenge.entrypoint=http
            #
            # Since we're making these requests through HTTPS, we need to validate the certificate
            # of Pebble, hence why we need to setup the root certificate authority via LEGO_CA_CERTIFICATES
            #
            - --certificatesresolvers.pebble.acme.caserver=https://pebble:14000/dir
            #
            #
            #
            - --certificatesresolvers.pebble.acme.storage=/acme/acme.json
            #
            #
            #
            - --providers.kubernetescrd
            #
            #
            #
          #
          # Pod volumes to mount into the container's filesystem. Cannot be updated.
          # Mount the statically declared root certificate of Pebble at /pebble/pebble.minica.pem
          #
          volumeMounts:
            #
            # This needs to match the 'volume' name of the pod
            #
            - name: pebble-configmap
              #
              # Mount all the data keys in the config map at /pebble/[config-map-data-key]
              #
              mountPath: /pebble
            #
            # This needs to match the 'volume' name of the pod
            #
            - name: ingress-storage
              #
              # Path within the container at which the volume should be mounted. Must not contain ':'
              #
              mountPath: /acme
              #
              # Path within the volume from which the container's volume should be mounted
              #
              # subPath: acme.json
          #
          # Root certificate used for signing Pebble's certificates
          # Tell the Lego ACME client about the whearabouts of Pebble's root certificate
          #
          env:
            - name: LEGO_CA_CERTIFICATES
              value: /pebble/pebble.minica.pem
      # List of volumes that can be mounted by containers belonging to the pod.
      # More info: https://kubernetes.io/docs/concepts/storage/volumes

      # Volume represents a named volume in a pod that may be accessed by any
      # container in the pod.
      #
      # PersistentVolumeClaimVolumeSource references the user's PVC in the same
      # namespace. This volume finds the bound PV and mounts that volume for the
      # pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around
      # another type of volume that is owned by someone else (the system).
      #
      # This statement just allocates the storage for the pod. We then need to assign it
      # to every container in the pod
      #
      volumes:
        #
        # Config map for storing the Pebble ACME server specifics
        #
        - name: pebble-configmap
          configMap:
            #
            # pebble-cm.yaml
            #
            name: pebble-cm
        #
        # Persistent volume claim to store Traefik's Pebble issued certificates
        #
        - name: ingress-storage
          # PersistentVolumeClaimVolumeSource represents a reference to a
          # PersistentVolumeClaim in the same namespace. More info:
          # https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
          persistentVolumeClaim:
            claimName: ingress-pvc
---
#
# Cluster gateway, load balances requests to all pods created and maintained by this deployment
#
apiVersion: v1
kind: Service
metadata:
  name: traefik-lb-srv
spec:
  type: LoadBalancer
  selector:
    app: traefik
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
    - name: https
      protocol: TCP
      port: 443
      targetPort: 443
---
#
# Router configs
#
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: client-ingress-route-https
spec:
  entryPoints:
    - https
  routes:
    - match: Host(`ticketing`)
      kind: Rule
      middlewares:
        - name: tls
      services:
        - name: client-srv
          port: 3000
  tls:
    certResolver: pebble
    options:
      name: tls-options
    domains:
      - main: ticketing
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: client-ingress-route-http
spec:
  entryPoints:
    - http
  routes:
    - match: Host(`ticketing`)
      kind: Rule
      middlewares:
        - name: tls
      #
      # TODO: Route the requests TO the client to HTTPS if they're done by a client from HTTP
      # I think this is not necessary as when the client makes a request to Traefik via its ClusterIP
      # it will communicate via HTTP, so I think we can activate all communications to the client from the outside world
      # to use HTTPS, as the client will always communicate with Traefik via its HTTP ClusterIP endpoint
      #
      # middlewares:
      #   - name: client-ingress-route-redirect-https
      services:
        - name: client-srv
          port: 3000
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: auth-ingress-route-https
spec:
  entryPoints:
    - https
  routes:
    - match: Host(`ticketing`) && PathPrefix(`/api/auth`)
      kind: Rule
      middlewares:
        - name: tls
        - name: strip-auth-prefix
      services:
        - name: auth-srv
          port: 3000
  tls:
    certResolver: pebble
    options:
      name: tls-options
    domains:
      - main: ticketing
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: auth-ingress-route-http
spec:
  entryPoints:
    - http
  routes:
    - match: Host(`ticketing`) && PathPrefix(`/api/auth`)
      kind: Rule
      middlewares:
        - name: tls
        - name: strip-auth-prefix
      services:
        - name: auth-srv
          port: 3000
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: ticket-ingress-route-https
spec:
  entryPoints:
    - https
  routes:
    - match: Host(`ticketing`) && PathPrefix(`/api/tickets`)
      kind: Rule
      middlewares:
        - name: tls
        - name: strip-ticket-prefix
      services:
        - name: tickets-srv
          port: 3000
  tls:
    certResolver: pebble
    options:
      name: tls-options
    domains:
      - main: ticketing
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: ticket-ingress-route-http
spec:
  entryPoints:
    - http
  routes:
    - match: Host(`ticketing`) && PathPrefix(`/api/tickets`)
      kind: Rule
      middlewares:
        - name: tls
        - name: strip-ticket-prefix
      services:
        - name: tickets-srv
          port: 3000
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: order-ingress-route-https
spec:
  entryPoints:
    - https
  routes:
    - match: Host(`ticketing`) && PathPrefix(`/api/orders`)
      kind: Rule
      middlewares:
        - name: tls
        - name: strip-order-prefix
      services:
        - name: orders-srv
          port: 3000
  tls:
    certResolver: pebble
    options:
      name: tls-options
    domains:
      - main: ticketing
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: order-ingress-route-http
spec:
  entryPoints:
    - http
  routes:
    - match: Host(`ticketing`) && PathPrefix(`/api/orders`)
      kind: Rule
      middlewares:
        - name: tls
        - name: strip-order-prefix
      services:
        - name: orders-srv
          port: 3000
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: payments-ingress-route-https
spec:
  entryPoints:
    - https
  routes:
    - match: Host(`ticketing`) && PathPrefix(`/api/payments`)
      kind: Rule
      middlewares:
        - name: tls
        - name: strip-payments-prefix
      services:
        - name: payments-srv
          port: 3000
  tls:
    certResolver: pebble
    options:
      name: tls-options
    domains:
      - main: ticketing
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: payments-ingress-route-http
spec:
  entryPoints:
    - http
  routes:
    - match: Host(`ticketing`) && PathPrefix(`/api/payments`)
      kind: Rule
      middlewares:
        - name: tls
        - name: strip-payments-prefix
      services:
        - name: payments-srv
          port: 3000
---
#
# TODO: Secure the dashboard access
#
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
spec:
  entryPoints:
    - https
  routes:
    - match: Host(`ticketing`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      kind: Rule
      middlewares:
        - name: tls
      # Lower the priority of this router in order to allow priority to our api routes
      priority: 40
      services:
        - name: api@internal
          kind: TraefikService
  tls:
    certResolver: pebble
    options:
      name: tls-options
    domains:
      - main: ticketing
---
#
# Middlewares
#
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: strip-auth-prefix
spec:
  stripPrefix:
    prefixes:
      - /api/auth
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: strip-ticket-prefix
spec:
  stripPrefix:
    prefixes:
      - /api/tickets
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: strip-order-prefix
spec:
  stripPrefix:
    prefixes:
      - /api/orders
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: strip-payments-prefix
spec:
  stripPrefix:
    prefixes:
      - /api/payments
---
#
# https://tferdinand.net/en/traefik-2-tls-configuration/
#
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: tls
spec:
  headers:
    frameDeny: true
    sslRedirect: true
    browserXssFilter: true
    contentTypeNosniff: true
    #
    # TODO: Register the domain https://hstspreload.org
    #
    stsIncludeSubdomains: true
    stsPreload: true
    stsSeconds: 31536000
---
apiVersion: traefik.containo.us/v1alpha1
kind: TLSOption
metadata:
  name: tls-options
spec:
  minVersion: VersionTLS12
  cipherSuites:
    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 # TLS 1.2
    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305  # TLS 1.2
    - TLS_AES_256_GCM_SHA384                # TLS 1.3
    - TLS_CHACHA20_POLY1305_SHA256          # TLS 1.3
  curvePreferences:
    - CurveP521
    - CurveP384
  sniStrict: true
